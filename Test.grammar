@interface {
    @property (nonatomic, strong) NSMutableArray *tokens;
    @property (nonatomic, strong) NSMutableArray *match_tokens;
}
@init {
  _tokens = [[NSMutableArray alloc] init];
  _match_tokens = [[NSMutableArray alloc] init];
}

program
@before {
  PKTokenizer *t = self.tokenizer;

  // whitespace
  //self.silentlyConsumesWhitespace = YES;
  //t.whitespaceState.reportsWhitespaceTokens = YES;
  //self.assembly.preservesWhitespaceTokens = YES;

  //[t.symbolState add:@"\\n"];
  //[t.whitespaceState setWhitespaceChars:NO from:'\n' to:'\n'];

  [t.wordState setWordChars:YES from:'|' to:'|'];
  [t setTokenizerState:t.commentState from:'#' to:'#'];

  // setup comments
  t.commentState.reportsCommentTokens = YES;
  [t.commentState addSingleLineStartMarker:@"//"];
  [t.commentState addSingleLineStartMarker:@"#"];
  [t.commentState addMultiLineStartMarker:@"/*" endMarker:@"*/"];
}
  = stmts
  ;

stmts
  = stmt (';'! stmt)*
  ;

stmt
  = label
  | pause
  | assignment
  | putStmt
  | echoStmt
  | gosubStmt
  | returnStmt
  | gotoStmt
  | moveStmt
  | nextRoom
  | matchStmt
  | matchWaitStmt
  | waitForStmt
  | exitStmt
  ;

echoStmt
  = 'echo'! atom*
  ;

exitStmt
  = 'exit'!
  ;

gosubStmt
  = 'gosub'! id (id | localVar)*
  ;

returnStmt
  = 'return'
  ;

gotoStmt
  = 'goto'! (id | localVar)
  ;

matchStmt
  = ('match'! | 'matchre'!) (id | localVar) regex+
  ;

matchWaitStmt
  = 'matchwait'! Number?
  ;

moveStmt
  = 'move'! atom+
  ;

nextRoom
  = 'nextroom'
  ;

pause
  = 'pause'! Number?
  ;

putCmds
  = commandsExpr | atom
  ;

putStmt
  = 'put'! putCmds+
  ;

scriptAbort = 'script' 'abort';
scriptPause = 'script' 'pause';
scriptResume = 'script' 'resume';

commands = scriptResume | scriptAbort | scriptPause;

commandsExpr
    = '#' commands atom+
    ;

waitForStmt
  = ('waitfor'! | 'waitforre'!) (atom|regex)+
  ;

label
  = id ':'!
  ;

assignmentPrefix
  = 'var'! | 'setvariable'!
  ;

assignment
  = assignmentPrefix id atom+
  ;

varPrefix
 = '%' | '$'
 ;

localVar
  = varPrefix id | varPrefix Number
  ;

id
  = identifier refinement refinement* | identifier
  ;

identifier
  = Word
  ;

refinement
  = ('.' identifier | Number)
  ;

regexLiteral
  = regexBodyWith regexMods? | regex
  ;

regexBodyWith
  = '/' regex '/'
  ;

regexMods
  = { MATCHES_IGNORE_CASE(@"[imxs]+", LS(1)) }? Word
  ;

regex
  = '^'? (regexSymbol|regexWord)+ '$'?
  ;

regexWord
  = { MATCHES(@"\\S", LS(1)) }? Word
  ;

regexSymbol
  = Symbol | ':'
  ;

atom
  = localVar
  | id
  | Word
  | Number
  ;

lines = line+;
line  = ~eol* eol;
eol   = { MATCHES(@"\\n", LS(1)) }? S;
